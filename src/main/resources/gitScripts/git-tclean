removingBranch=${1}

if [[ ! -z $removingBranch ]]; then
    git sclean $removingBranch
    exit 1
fi

echo "Do you want to \033[31mremove references to the deleted remote branches?\033[0m [y/n]"
read shouldPrune

if [[ "$shouldPrune" == "y" || "$shouldPrune" == "Y" ]]; then
    submodules=($(git config --file .gitmodules --get-regexp path | awk '{ print $2 }'))

    currentDirectory=$(pwd)

    for submodule in "${submodules[@]}"
    do
        echo "Entering '$submodule'"
        cd "$currentDirectory/$submodule"

        git remote prune origin
    done

    cd "$currentDirectory"

    git remote prune origin
fi

removingBranches=()

echo "Looking for local branches without a remote connection..."

for branch in $(git for-each-ref --format='%(refname:short)' refs/heads/); do
    if [[ -z $(git ls-remote --heads origin ${branch}) ]]; then
        echo "\033[31m$branch\033[0m"
        removingBranches+=("$branch")
    fi;
done

if [[ "${#removingBranches[@]}" -eq 0 ]]; then
    echo "You have no local candidates for the remove operation."
    exit 1
fi

echo "Do you want to \033[31mremove this branches?\033[0m [y/n/i]"
read ans

case $ans in  
    n|N) exit 1 ;;
    y|Y|i|I) echo "Removal in progress..." ;;
    *) echo "WHAT!?!" && exit 1 ;;
esac

for branch in "${removingBranches[@]}"; do
    if [[ "$ans" == "i" || "$ans" == "I" ]]; then
        echo "\033[31mRemove $branch?\033[0m [y/n]"
        read shouldRemove

        case $shouldRemove in  
            n|N) continue ;;
            y|Y) echo "OK." ;;
            *) echo "WHAT!?!" && continue ;;
        esac
    fi

    git sclean $branch

    echo "\033[31m$branch has been removed\033[0m"
done